let

  bool : Type
  bool = (xx : Type) -> xx -> xx -> xx

  true : bool
  true = \x. \y. \z. y
 
  false : bool
  false = \x. \y. \z. z

  not : bool -> bool
  not = \b . (((b bool) false) true)

  Unit : Type
  Unit = (x : Type) -> x

  if : (b: bool) -> Type -> Type -> Type
  if = \b . \x . \y . b Type x y

  and : Type -> Type -> Type
  and = \p. \q. (c: Type) -> (p -> q -> c) -> c

  T : bool -> Type
  T = \b. if b Unit bool


in 
  bool