let
  -- some basic booleans...
  bool : Type
  bool = (x : Type) -> x -> x -> x

  true : bool
  true = \x. \y. \z. y

  false : bool
  false = \x. \y. \z. z

  if : (b: bool) -> Type -> Type -> Type
  if = \b . \x . \y . b Type x y


  Person : Type
  Person = { manager: bool }

  jenkins : Person
  jenkins = Person_ { manager = true }


  
  -- Regular function:
  id : (t:Type) -> t -> t
  id = \t. \x. x

  -- Dependent function:
  boolOrPersonType : bool -> Type
  boolOrPersonType = \b. if b bool Person

  thisIsABoolean : boolOrPersonType true
  thisIsABoolean = true
  
  thisIsAPerson : boolOrPersonType false
  thisIsAPerson = jenkins
  


  -- Dependent record:
  boolOrPersonWrapper : (A: bool) -> Type
  boolOrPersonWrapper (A: bool) = { boolOrPerson: (if A bool Person) }

  ff : boolOrPersonWrapper true
  ff = boolOrPersonWrapper_ true { boolOrPerson = true }

  gg : boolOrPersonWrapper false
  gg = boolOrPersonWrapper_ false { boolOrPerson = jenkins }




  -- dependent vector

  Unit : Type
  Unit = {}

  Nat : Type
  Nat = (x : Type) -> (x -> x) -> x -> x

  zero : Nat
  zero = \t. \f. \x. x

  isZero : Nat -> bool
  isZero = \n. n bool (\f. false) true

  one : Nat
  one = \t. \f. \x. f x

  two : Nat
  two = \t. \f. \x. f (f x)

  pred : Nat -> Nat
  pred = \n. \x. \f. \xx. n ((x->x) -> x) (\g. \h. h (g f)) (\u. xx) (\u. u) 

  Vector : Nat -> Type -> Type
  Vector (length: Nat) (E:Type) = { head: (if (isZero length) Unit E), tail: (if (isZero length) Unit (Vector (pred length) E)) }

  emptyVec : Vector zero Unit 
  emptyVec = Vector_ { head = Unit_, tail = Unit_ }
in

  bool