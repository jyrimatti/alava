let

bool : Type
bool = (x : Type) -> x -> x -> x

if : bool -> (x:Type) -> x -> x -> x
if = \b. b

-- HW #1: get this file to type check by adding typing rules
-- for booleans and let expressions to TypeCheck.hs and Equal.hs 

z0 : bool
z0 = if True then False else True

-- prelude operations on boolean values

or : bool -> bool -> bool
or = \b1 b2. if b1 True b2

not : bool -> bool
not = \b . if b False True

and : bool -> bool -> bool
and = \b1 b2. if b1 b2 False

eq_bool : bool -> bool -> bool
eq_bool = \ b1 b2 . 
  if b1 b2 (not b2)  

-- sigma types

--double : (A:Type) -> (x : A) -> { x : A | A }
--double = \A x. (x,x) 

--fst : (A:Type) -> (B : A -> Type) -> { x : A | B x } -> A
--fst = \A B p. pcase p of (x0,y) -> x0

in
  z0